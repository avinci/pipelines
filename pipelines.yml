resources:
  - name: go_gitRepo
    type: GitRepo
    configuration:
      path: avinci/swampup-go-service
      gitProvider: avinci_github

  - name: svc_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: demoArt
      buildName: svc_build
      buildNumber: 1

  - name: svc_promoted_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: demoArt
      buildName: svc_build
      buildNumber: 1

  - name: backend_gitRepo
    type: GitRepo
    configuration:
      path: avinci/swampup-java-backend-service
      gitProvider: avinci_github

  - name: app_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: demoArt
      buildName: backend_build
      buildNumber: 1

  - name: app_promoted_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: demoArt
      buildName: backend_build
      buildNumber: 1

  - name: frontend_gitRepo
    type: GitRepo
    configuration:
      path: avinci/swampup-vue-frontend
      gitProvider: avinci_github

  - name: releaseBundle
    type: ReleaseBundle
    configuration:
      sourceDistribution: demoDist
      name: demo_rb
      version: v1.0.0

  - name: signedBundle
    type: ReleaseBundle
    configuration:
      sourceDistribution: demoDist
      name: demo_rb
      version: v1.0.0

  - name: distributionRules
    type: DistributionRule
    configuration:
      sourceDistribution: demoDist
      serviceName: "*"
      siteName: "*"
      cityName: "*"
      countryCodes:
        - "CN"
        - "GB"

  - name: deploy_vm
    type: VmCluster
    configuration:
      sshKey: deploySsh
      targets:
        - 167.71.157.57

pipelines:
  - name: demo_service
    steps:
      - name: bld_svc
        type: DockerBuild
        configuration:
          dockerFileLocation: .
          dockerFileName: Dockerfile
          dockerImageName: 34.66.110.173:8081/docker-local/gomicrosvc
          dockerImageTag: $run_number
          inputResources:
            - name: go_gitRepo
          integrations:
            - name: demoArt

      - name: push_svc
        type: DockerPush
        configuration:
          targetRepository: docker-local
          integrations:
            - name: demoArt
          inputSteps:
            - name: bld_svc

      - name: publish_svc_build
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: push_svc
          outputResources:
            - name: svc_build_info

      - name: promote_svc_build
        type: PromoteBuild
        configuration:
          targetRepository: demoPipelines
          integrations:
            - name: demoArt
          inputResources:
            - name: svc_build_info
          outputResources:
            - name: svc_promoted_build_info

  - name: demo_app
    steps:
      - name: bld_backend
        type: MvnBuild
        configuration:
          sourceLocation: .
          mvnCommand: clean install -ntp
          configFileLocation: .
          configFileName: mvn-art-config
          inputResources:
            - name: backend_gitRepo
          integrations:
            - name: demoArt
        execution:
          onStart:
            - apt-get update
            - apt install default-jdk
            - pushd /tmp
            - wget http://mirrors.estointernet.in/apache/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz
            - tar xzvf apache-maven-3.6.1-bin.tar.gz
            - export PATH=$PATH:/tmp/apache-maven-3.6.1/bin
            - export M2_HOME=/tmp/apache-maven-3.6.1/
            - popd
            - javac -version
            - mvn --version


      - name: bld_frontend
        type: NpmBuild
        configuration:
          npmArgs: --no-progress --no-audit
          sourceLocation: .
          repositoryName: npm-dev-virtual
          inputResources:
            - name: frontend_gitRepo
          integrations:
            - name: demoArt

      - name: pack_frontend
        type: Bash
        configuration:
          inputSteps:
            - name: bld_frontend
          integrations:
            - name: demoArt
        execution:
          onStart:
            - export tempStateLocation="$step_tmp_dir/npmSourceState"
            - restore_run_files npmBuildInputGitRepo $tempStateLocation
            - pushd $tempStateLocation
            - npm run build
            - add_run_files $tempStateLocation/. npmBuildInputGitRepo

      - name: publish_frontend
        type: NpmPublish
        configuration:
          repositoryName: npm-libs-local
          inputSteps:
            - name: pack_frontend
          integrations:
            - name: demoArt
        execution:
          onStart:
            - export inputNpmBuildStepName="bld_frontend"

      - name: build_app
        type: Bash
        configuration:
          environmentVariables:
            dockerImageName: 34.66.110.173:8081/docker-local/app
            dockerImageTag: ${run_number}
            dummyEnv: 123
          inputResources:
            - name: backend_gitRepo
              trigger: false
          inputSteps:
            - name: bld_backend
            - name: publish_frontend
          integrations:
            - name: demoArt
        execution:
          onStart:
            - rm -rf $run_dir/workspace/jfrog
            - retry_command jfrog rt config --url $int_art_url --user $int_art_user --apikey $int_art_apikey --interactive=false
            - pushd $res_backend_gitRepo_resourcePath
            - echo $int_art_url
            - echo $run_Number
            - add_run_variables buildStepName=${step_name}
            - add_run_variables ${step_name}_buildNumber=${run_number}
            - add_run_variables ${step_name}_buildName=${pipeline_name}
            - docker build --pull --no-cache -t $dockerImageName:$dockerImageTag --build-arg REGISTRY=${int_art_url} .
            - jfrog rt bce $pipeline_name $run_number
            - jfrog rt docker-push $dockerImageName:$dockerImageTag docker-local --build-name=$pipeline_name --build-number=$run_number
            - add_run_files /tmp/jfrog/. jfrog

      - name: publish_app_build
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: build_app
          outputResources:
            - name: app_build_info

      - name: promote_app_build
        type: PromoteBuild
        configuration:
          targetRepository: demoPipelines
          integrations:
            - name: demoArt
          inputResources:
            - name: app_build_info
          outputResources:
            - name: app_promoted_build_info

  - name: demo_release
    steps:
      - name: bundle
        type: CreateReleaseBundle
        configuration:
          releaseBundleName: demo_rb
          releaseBundleVersion: v1.0.$run_number
          dryRun: false
          sign: false
          description: "some random test description"
          inputResources:
            - name: svc_promoted_build_info
              trigger: false
            - name: app_promoted_build_info
              trigger: false
          outputResources:
            - name: releaseBundle
          releaseNotes:
            syntax: markdown
            content: |
              ## Heading
                * Bullet
                * Points

      - name: sign
        type: SignReleaseBundle
        configuration:
          inputResources:
            - name: releaseBundle
          outputResources:
            - name: signedBundle

      - name: distribute
        type: DistributeReleaseBundle
        configuration:
          dryRun: false
          inputResources:
            - name: signedBundle
            - name: distributionRules

      - name: deploy
        type: Bash
        configuration:
          environmentVariables:
            docker_repository: demoPipelines
            artifactory_address: 34.66.107.45:8090
          integrations:
            - name: demoEdge
          inputResources:
            - name: deploy_vm
            - name: svc_promoted_build_info
              trigger: false
            - name: app_promoted_build_info
              trigger: false
          inputSteps:
            - name: distribute
        execution:
          onExecute:
            - ssh -i ~/.ssh/deploy_vm root@${res_deploy_vm_targets_0} sudo /root/deploy-to-prod-test.sh $artifactory_address $docker_repository $int_edge_art_apikey $res_app_promoted_build_info_buildNumber $res_svc_promoted_build_info_buildNumber